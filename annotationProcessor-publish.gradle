apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java-library'


ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}
publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            println("groupId:" + PUBLISH_GROUP_ID)

            artifactId PUBLISH_ARTIFACT_ID
            println("artifactId:" + PUBLISH_ARTIFACT_ID)

            version PUBLISH_VERSION
            println("version:" + PUBLISH_VERSION)

            from components.java
            // Two artifacts, the `aar` and the sources
//            artifact("$buildDir/libs/${project.getName()}.jar")
            artifact javadocJar
            artifact sourcesJar
            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                println("name: $PUBLISH_ARTIFACT_ID")
                description = 'annotationProcessor'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/yollpoll/framework'
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yollpoll'
                        name = 'songpengqi'
                        email = '403716879@qq.com'
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:git:github.com/yollpoll/framework.git'
                    developerConnection = 'scm:git:ssh://github.com/yollpoll/framework.git'
                    //分支地址：
                    url = 'https://github.com/yollpoll/framework/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
//                withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    project.configurations.implementation.allDependencies.each {
//                        println("dependencyName: " + it.name)
//                        if (!'unspecified'.equals(it.name)) {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', it.group)
//                            dependencyNode.appendNode('artifactId', it.name)
//                            dependencyNode.appendNode('version', it.version)
//                        }
//                    }
//                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name "mavencentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            println(version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl)
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
        maven {
            name "local"
            url "$buildDir/repo"
        }
    }
}
signing {
//    sign configurations.archives
//    sign configurations.archives
    sign publishing.publications
}

javadoc {
    description = "生成jar格式的javadoc。"
    // 只显示 protected 和 public 的类和成员
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = project.name
    // 静默javadoc检查（比如不支持@date会报错等），jdk 8+
    options.addStringOption('Xdoclint:none', '-quiet')
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
    // suppress warnings due to cross-module @see and @link references;
    // note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    // suppress "## warnings" message
    logging.captureStandardOutput LogLevel.INFO
    // 编码一定要配置否则直接出错
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
}
